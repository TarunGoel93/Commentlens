# from flask import Flask, redirect, url_for, session, request, render_template
# from google.oauth2.credentials import Credentials
# from google_auth_oauthlib.flow import Flow
# from googleapiclient.discovery import build
# import os
# from flask_sqlalchemy import SQLAlchemy
# import bcrypt
# import pickle
# import json
# import matplotlib.pyplot as plt
# from io import BytesIO
# import base64

# # Set the environment variable to bypass the OAuth2 HTTPS requirement
# os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'

# app = Flask(__name__)
# app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
# db = SQLAlchemy(app)
# app.secret_key = os.urandom(24)  # Use a securely generated key

# class User(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     name = db.Column(db.String(100), nullable=False)
#     email = db.Column(db.String(100), unique=True)
#     password = db.Column(db.String(100))

#     def __init__(self, email, password, name):
#         self.name = name
#         self.email = email
#         self.password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    
#     def check_password(self, password):
#         return bcrypt.checkpw(password.encode('utf-8'), self.password.encode('utf-8'))

# with app.app_context():
#     db.create_all()

# @app.route('/')
# def index():
#     return render_template('index.html')

# @app.route('/register', methods=['GET', 'POST'])
# def register():
#     if request.method == 'POST':
#         name = request.form['name']
#         email = request.form['email']
#         password = request.form['password']

#         new_user = User(name=name, email=email, password=password)
#         db.session.add(new_user)
#         db.session.commit()
#         return redirect('/login')

#     return render_template('register.html')

# @app.route('/login', methods=['GET', 'POST'])
# def login():
#     if request.method == 'POST':
#         email = request.form['email']
#         password = request.form['password']

#         user = User.query.filter_by(email=email).first()
        
#         if user and user.check_password(password):
#             session['email'] = user.email
#             return redirect('/dashboard')
#         else:
#             return render_template('login.html', error='Invalid user')

#     return render_template('login.html')

# @app.route('/dashboard')
# def dashboard():
#     if 'email' in session:
#         user = User.query.filter_by(email=session['email']).first()
#         return render_template('dashboard.html', user=user)
    
#     return redirect('/login')

# @app.route('/logout')
# def logout():
#     session.pop('email', None)
#     return redirect('/login')

# @app.route('/youtube')
# def youtube():
#     return render_template('youtube.html')

# # Path to the client secret JSON file downloaded from Google Developer Console
# CLIENT_SECRETS_FILE = r'C:\Users\Dell\Desktop\MUJ HACKX 2.0\client_secret.json'
# SCOPES = ['https://www.googleapis.com/auth/youtube.force-ssl']
# API_SERVICE_NAME = 'youtube'
# API_VERSION = 'v3'

# def credentials_to_dict(credentials):
#     return {
#         'token': credentials.token,
#         'refresh_token': credentials.refresh_token,
#         'token_uri': credentials.token_uri,
#         'client_id': credentials.client_id,
#         'client_secret': credentials.client_secret,
#         'scopes': credentials.scopes
#     }

# @app.route('/authorize')
# def authorize():
#     flow = Flow.from_client_secrets_file(
#         CLIENT_SECRETS_FILE, scopes=SCOPES)
#     flow.redirect_uri = url_for('oauth2callback', _external=True)
#     authorization_url, state = flow.authorization_url()
#     session['state'] = state
#     return redirect(authorization_url)

# @app.route('/oauth2callback')
# def oauth2callback():
#     state = session['state']
#     flow = Flow.from_client_secrets_file(
#         CLIENT_SECRETS_FILE, scopes=SCOPES, state=state)
#     flow.redirect_uri = url_for('oauth2callback', _external=True)
#     authorization_response = request.url
#     flow.fetch_token(authorization_response=authorization_response)
#     credentials = flow.credentials
#     session['credentials'] = credentials_to_dict(credentials)
#     return redirect(url_for('analyze_comments'))

# # Function to get comments from a YouTube video
# def get_comments(youtube, video_id):
#     comments = []
#     request = youtube.commentThreads().list(
#         part='snippet',
#         videoId=video_id,
#         maxResults=100
#     )
#     response = request.execute()

#     for item in response['items']:
#         comment = item['snippet']['topLevelComment']['snippet']['textDisplay']
#         comments.append(comment)

#     return comments

# @app.route('/analyze_comments', methods=['GET', 'POST'])
# def analyze_comments():
#     if 'credentials' not in session:
#         return redirect('authorize')

#     credentials = Credentials(**session['credentials'])
#     youtube = build(API_SERVICE_NAME, API_VERSION, credentials=credentials)

#     if request.method == 'POST':
#         video_id = request.form['video_id']  # Get video ID from user input
#         comments = get_comments(youtube, video_id)  # Get comments using the user-defined function

#         # Load your sentiment analysis model
#         with open('classifier.pkl', 'rb') as model_file:
#             classifier = pickle.load(model_file)
#         with open('tfidf_vectorizer.pkl', 'rb') as vectorizer_file:
#             tfidf_vectorizer = pickle.load(vectorizer_file)

#         # Analyze comments
#         comments_tfidf = tfidf_vectorizer.transform(comments)
#         predicted_sentiments = classifier.predict(comments_tfidf)

#         # Count sentiments
#         sentiment_counts = {
#             'positive': list(predicted_sentiments).count('positive'),
#             'negative': list(predicted_sentiments).count('negative'),
#             'neutral': list(predicted_sentiments).count('neutral')
#         }

#         # Plotting the graph
#         plt.figure(figsize=(10, 6))
#         plt.bar(sentiment_counts.keys(), sentiment_counts.values(), color=['green', 'red', 'blue'])
#         plt.xlabel('Sentiment')
#         plt.ylabel('Count')
#         plt.title('Sentiment Analysis of YouTube Comments')
#         plt.tight_layout()

#         # Save the plot to a bytes object and encode it as a base64 string
#         img = BytesIO()
#         plt.savefig(img, format='png')
#         img.seek(0)
#         plot_url = base64.b64encode(img.getvalue()).decode()

#         return render_template('results.html', plot_url=plot_url, sentiments=sentiment_counts)

#     return render_template('youtube.html')  # Render the YouTube page for the first time

# if __name__ == '__main__':
#     app.run('localhost', 5000, debug=True)



## result.html

# <!-- <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Sentiment Analysis Results</title>
# </head>
# <body>
#     <h1>Sentiment Analysis Results</h1>
#     <img src="data:image/png;base64,{{ plot_url }}" alt="Sentiment Analysis Graph">
#     <p>Positive: {{ sentiments['positive'] }}</p>
#     <p>Negative: {{ sentiments['negative'] }}</p>
#     <p>Neutral: {{ sentiments['neutral'] }}</p>
# </body>
# </html> -->




# <!-- <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Analysis Results</title>
# </head>
# <body>
#     <h1>Sentiment Analysis Results</h1>
#     <img src="data:image/png;base64,{{ plot_url }}" alt="Sentiment Graph">
#     <ul>
#         <li>Positive: {{ sentiments['positive'] }}</li>
#         <li>Negative: {{ sentiments['negative'] }}</li>
#         <li>Neutral: {{ sentiments['neutral'] }}</li>
#     </ul>
# </body>
# </html> -->


# <!-- <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Analysis Results</title>
#     <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
#     <style>
#         body {
#             background-color: #1e1e1e;
#             color: #f5f5f5;
#             font-family: Arial, sans-serif;
#             display: flex;
#             justify-content: center;
#             align-items: center;
#             min-height: 100vh;
#             margin: 0;
#         }
#         .container {
#             background-color: #2c2c2c;
#             padding: 30px;
#             border-radius: 8px;
#             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
#             max-width: 600px;
#         }
#         h1, h3 {
#             text-align: center;
#         }
#         ul {
#             list-style: none;
#             padding: 0;
#         }
#         ul li {
#             background-color: #333;
#             margin: 10px 0;
#             padding: 10px;
#             border-radius: 5px;
#         }
#         img {
#             display: block;
#             margin: 20px auto;
#             max-width: 100%;
#             height: auto;
#         }
#         .btn-secondary {
#             display: block;
#             margin: 20px auto;
#             background-color: #6c757d;
#             border-color: #6c757d;
#         }
#         .btn-secondary:hover {
#             background-color: #5a6268;
#             border-color: #545b62;
#         }
#     </style>
# </head>
# <body>
#     <div class="container mt-5">
#         <h1>Sentiment Analysis Results</h1>
#         <h3>Sentiment Counts:</h3>
#         <ul>
#             <li>Positive: {{ sentiments['positive'] }}</li>
#             <li>Negative: {{ sentiments['negative'] }}</li>
#             <li>Neutral: {{ sentiments['neutral'] }}</li>
#         </ul>
#         <h3>Sentiment Analysis Graph:</h3>
#         <img src="data:image/png;base64,{{ plot_url }}" alt="Sentiment Analysis Graph">
#         <a href="/dashboard" class="btn btn-secondary mt-3">Back to Dashboard</a>
#     </div>
# </body>
# </html>

#  -->